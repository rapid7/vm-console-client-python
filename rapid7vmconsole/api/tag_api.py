# coding: utf-8

"""
    Python InsightVM API Client

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rapid7vmconsole.api_client import ApiClient


class TagApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_tag(self, **kwargs):  # noqa: E501
        """Tags  # noqa: E501

        Creates a new tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tag(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Tag tag: The details of the tag.
        :return: ReferenceWithTagIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_tag_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_tag_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_tag_with_http_info(self, **kwargs):  # noqa: E501
        """Tags  # noqa: E501

        Creates a new tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tag_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Tag tag: The details of the tag.
        :return: ReferenceWithTagIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tag" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag' in params:
            body_params = params['tag']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferenceWithTagIDLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tag(self, id, **kwargs):  # noqa: E501
        """Tag  # noqa: E501

        Deletes the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tag(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tag_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tag_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_tag_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag  # noqa: E501

        Deletes the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tag_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tag(self, id, **kwargs):  # noqa: E501
        """Tag  # noqa: E501

        Returns a tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tag(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tag_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tag_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_tag_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag  # noqa: E501

        Returns a tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tag_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tag_asset_groups(self, id, **kwargs):  # noqa: E501
        """Tag Asset Groups  # noqa: E501

        Returns the asset groups associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tag_asset_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: ReferencesWithAssetGroupIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tag_asset_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tag_asset_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_tag_asset_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Asset Groups  # noqa: E501

        Returns the asset groups associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tag_asset_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: ReferencesWithAssetGroupIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tag_asset_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_tag_asset_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/asset_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferencesWithAssetGroupIDLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tag_search_criteria(self, id, **kwargs):  # noqa: E501
        """Tag Search Criteria  # noqa: E501

        Returns the search criteria associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tag_search_criteria(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: SearchCriteria
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tag_search_criteria_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tag_search_criteria_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_tag_search_criteria_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Search Criteria  # noqa: E501

        Returns the search criteria associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tag_search_criteria_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: SearchCriteria
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tag_search_criteria" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_tag_search_criteria`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/search_criteria', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchCriteria',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tagged_assets(self, id, **kwargs):  # noqa: E501
        """Tag Assets  # noqa: E501

        Returns the assets tagged with a tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tagged_assets(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: TaggedAssetReferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tagged_assets_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tagged_assets_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_tagged_assets_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Assets  # noqa: E501

        Returns the assets tagged with a tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tagged_assets_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: TaggedAssetReferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tagged_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_tagged_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaggedAssetReferences',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tagged_sites(self, id, **kwargs):  # noqa: E501
        """Tag Sites  # noqa: E501

        Returns the sites associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tagged_sites(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: ReferencesWithSiteIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tagged_sites_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tagged_sites_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_tagged_sites_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Sites  # noqa: E501

        Returns the sites associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tagged_sites_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: ReferencesWithSiteIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tagged_sites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_tagged_sites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferencesWithSiteIDLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tags(self, **kwargs):  # noqa: E501
        """Tags  # noqa: E501

        Returns all tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name
        :param str type: type
        :param int page: The index of the page (zero-based) to retrieve.
        :param int size: The number of records per page to retrieve.
        :param list[str] sort: The criteria to sort the records by, in the format: `property[,ASC|DESC]`. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
        :return: PageOfTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Tags  # noqa: E501

        Returns all tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: name
        :param str type: type
        :param int page: The index of the page (zero-based) to retrieve.
        :param int size: The number of records per page to retrieve.
        :param list[str] sort: The criteria to sort the records by, in the format: `property[,ASC|DESC]`. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
        :return: PageOfTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tag_search_criteria(self, id, **kwargs):  # noqa: E501
        """Tag Search Criteria  # noqa: E501

        Removes the search criteria associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tag_search_criteria(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_tag_search_criteria_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tag_search_criteria_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_tag_search_criteria_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Search Criteria  # noqa: E501

        Removes the search criteria associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tag_search_criteria_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tag_search_criteria" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_tag_search_criteria`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/search_criteria', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tagged_sites(self, id, **kwargs):  # noqa: E501
        """Tag Sites  # noqa: E501

        Removes the associations between the tag and the sites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tagged_sites(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_tagged_sites_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tagged_sites_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_tagged_sites_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Sites  # noqa: E501

        Removes the associations between the tag and the sites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tagged_sites_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tagged_sites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_tagged_sites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/sites', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_tagged_asset_groups(self, id, **kwargs):  # noqa: E501
        """Tag Asset Groups  # noqa: E501

        Sets the asset groups associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_tagged_asset_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param list[int] asset_group_ids: The asset groups to add to the tag.
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_tagged_asset_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_tagged_asset_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def set_tagged_asset_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Asset Groups  # noqa: E501

        Sets the asset groups associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_tagged_asset_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param list[int] asset_group_ids: The asset groups to add to the tag.
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'asset_group_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_tagged_asset_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `set_tagged_asset_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'asset_group_ids' in params:
            body_params = params['asset_group_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/asset_groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_tagged_sites(self, id, **kwargs):  # noqa: E501
        """Tag Sites  # noqa: E501

        Sets the sites associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_tagged_sites(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param list[int] sites: The sites to add to the tag.
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_tagged_sites_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_tagged_sites_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def set_tagged_sites_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Sites  # noqa: E501

        Sets the sites associated with the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_tagged_sites_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param list[int] sites: The sites to add to the tag.
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sites']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_tagged_sites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `set_tagged_sites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sites' in params:
            body_params = params['sites']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/sites', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tag_asset(self, id, asset_id, **kwargs):  # noqa: E501
        """Tag Asset  # noqa: E501

        Adds an asset to the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_asset(id, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int asset_id: The identifier of the asset. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tag_asset_with_http_info(id, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tag_asset_with_http_info(id, asset_id, **kwargs)  # noqa: E501
            return data

    def tag_asset_with_http_info(self, id, asset_id, **kwargs):  # noqa: E501
        """Tag Asset  # noqa: E501

        Adds an asset to the tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_asset_with_http_info(id, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int asset_id: The identifier of the asset. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tag_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tag_asset`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `tag_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/assets/{assetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tag_asset_group(self, id, asset_group_id, **kwargs):  # noqa: E501
        """Tag Asset Group  # noqa: E501

        Adds an asset group to this tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_asset_group(id, asset_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int asset_group_id: The asset group identifier. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tag_asset_group_with_http_info(id, asset_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tag_asset_group_with_http_info(id, asset_group_id, **kwargs)  # noqa: E501
            return data

    def tag_asset_group_with_http_info(self, id, asset_group_id, **kwargs):  # noqa: E501
        """Tag Asset Group  # noqa: E501

        Adds an asset group to this tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_asset_group_with_http_info(id, asset_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int asset_group_id: The asset group identifier. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'asset_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tag_asset_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tag_asset_group`")  # noqa: E501
        # verify the required parameter 'asset_group_id' is set
        if ('asset_group_id' not in params or
                params['asset_group_id'] is None):
            raise ValueError("Missing the required parameter `asset_group_id` when calling `tag_asset_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'asset_group_id' in params:
            path_params['assetGroupId'] = params['asset_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/asset_groups/{assetGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tag_site(self, id, site_id, **kwargs):  # noqa: E501
        """Tag Site  # noqa: E501

        Adds a site to this tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_site(id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int site_id: The identifier of the site. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tag_site_with_http_info(id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tag_site_with_http_info(id, site_id, **kwargs)  # noqa: E501
            return data

    def tag_site_with_http_info(self, id, site_id, **kwargs):  # noqa: E501
        """Tag Site  # noqa: E501

        Adds a site to this tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_site_with_http_info(id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int site_id: The identifier of the site. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tag_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tag_site`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `tag_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/sites/{siteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def untag_all_asset_groups(self, id, **kwargs):  # noqa: E501
        """Tag Asset Groups  # noqa: E501

        Removes the associations between the tag and all asset groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.untag_all_asset_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.untag_all_asset_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.untag_all_asset_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def untag_all_asset_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Asset Groups  # noqa: E501

        Removes the associations between the tag and all asset groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.untag_all_asset_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method untag_all_asset_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `untag_all_asset_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/asset_groups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def untag_asset(self, id, asset_id, **kwargs):  # noqa: E501
        """Tag Asset  # noqa: E501

        Removes an asset from the tag. Note: The asset must be added through the asset or tag, if the asset is added using a site, asset group, or search criteria this will not remove the asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.untag_asset(id, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int asset_id: The identifier of the asset. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.untag_asset_with_http_info(id, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.untag_asset_with_http_info(id, asset_id, **kwargs)  # noqa: E501
            return data

    def untag_asset_with_http_info(self, id, asset_id, **kwargs):  # noqa: E501
        """Tag Asset  # noqa: E501

        Removes an asset from the tag. Note: The asset must be added through the asset or tag, if the asset is added using a site, asset group, or search criteria this will not remove the asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.untag_asset_with_http_info(id, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int asset_id: The identifier of the asset. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method untag_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `untag_asset`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `untag_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/assets/{assetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def untag_asset_group(self, id, asset_group_id, **kwargs):  # noqa: E501
        """Tag Asset Group  # noqa: E501

        Removes an asset group from this tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.untag_asset_group(id, asset_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int asset_group_id: The asset group identifier. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.untag_asset_group_with_http_info(id, asset_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.untag_asset_group_with_http_info(id, asset_group_id, **kwargs)  # noqa: E501
            return data

    def untag_asset_group_with_http_info(self, id, asset_group_id, **kwargs):  # noqa: E501
        """Tag Asset Group  # noqa: E501

        Removes an asset group from this tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.untag_asset_group_with_http_info(id, asset_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int asset_group_id: The asset group identifier. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'asset_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method untag_asset_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `untag_asset_group`")  # noqa: E501
        # verify the required parameter 'asset_group_id' is set
        if ('asset_group_id' not in params or
                params['asset_group_id'] is None):
            raise ValueError("Missing the required parameter `asset_group_id` when calling `untag_asset_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'asset_group_id' in params:
            path_params['assetGroupId'] = params['asset_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/asset_groups/{assetGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def untag_site(self, id, site_id, **kwargs):  # noqa: E501
        """Tag Site  # noqa: E501

        Removes a site from this tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.untag_site(id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int site_id: The identifier of the site. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.untag_site_with_http_info(id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.untag_site_with_http_info(id, site_id, **kwargs)  # noqa: E501
            return data

    def untag_site_with_http_info(self, id, site_id, **kwargs):  # noqa: E501
        """Tag Site  # noqa: E501

        Removes a site from this tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.untag_site_with_http_info(id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param int site_id: The identifier of the site. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method untag_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `untag_site`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `untag_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/sites/{siteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tag(self, id, **kwargs):  # noqa: E501
        """Tag  # noqa: E501

        Updates the details of a tag. For more information about accepted fields for the tag search criteria see the PUT /search_criteria documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tag(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param Tag tag: The details of the tag.
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tag_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tag_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_tag_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag  # noqa: E501

        Updates the details of a tag. For more information about accepted fields for the tag search criteria see the PUT /search_criteria documentation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tag_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param Tag tag: The details of the tag.
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag' in params:
            body_params = params['tag']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tag_search_criteria(self, id, **kwargs):  # noqa: E501
        """Tag Search Criteria  # noqa: E501

        Updates the search criteria associated with the tag.   The following table outlines the search criteria fields and the available operators:  | Field | Operators |  | ---------- | ---------------- |  | ip-address | is, is-not, in-range, not-in-range, is-like, not-like |  | ip-address-type | in, not-in |  | alternate-address-type | in |  | host-name | is, is-not, starts-with, ends-with, contains, does-not-contain, is-empty, is-not-empty, is-like, not-like |  | host-type | in, not-in |  | operating-system | contains, does-not-contain, is-empty, is-not-empty |  | software | contains, does-not-contain|  | open-ports | is, is-not, in-range |  | service-name | contains, does-not-contain |  | risk-score | is, is-not, in-range, is-greater-than,is-less-than |  | last-scan-date | is-on-or-before, is-on-or-after, is-between, is-earlier-than, is-within-the-last |  | vulnerability-assessed | is-on-or-before, is-on-or-after, is-between, is-earlier-than, is-within-the-last |  | vulnerability-category | is, is-not, starts-with, ends-with, contains, does-not-contain|  | vulnerability-cvss-score | is, is-not, in-range, is-greater-than, is-less-than |  | vulnerability-cvss-v3-score | is, is-not, in-range, is-greater-than, is-less-than |  | vulnerability-exposures | includes, does not-include |  | vulnerability-title | contains, does-not-contain, is, is-not, starts-with, ends-with |  | cve | is, is-not, contains, does-not-contain |  | cvss-access-complexity | is, is-not | | cvss-authentication-required | is, is-not | | cvss-access-vector | is, is-not | | cvss-availability-impact | is, is-not | | cvss-confidentiality-impact | is, is-not | | cvss-integrity-impact | is, is-not | | cvss-v3-confidentiality-impact | is, is-not | | cvss-v3-integrity-impact | is, is-not | | cvss-v3-availability-impact | is, is-not | | cvss-v3-attack-vector | is, is-not | | cvss-v3-attack-complexity | is, is-not | | cvss-v3-user-interaction | is, is-not | | cvss-v3-privileges-required | is, is-not | | mobile-device-last-sync | is-within-the-last, is-earlier-than |  | pci-compliance | is |  | site-id | in, not-in |  | criticality-tag | is, is-not, is-greater-than, is-less-than, is-applied, is-not-applied |  | custom-tag | is, is-not, starts-with, ends-with, contains, does-not-contain, is-applied, is-not-applied |  | location-tag | is, is-not, starts-with, ends-with, contains, does-not-contain, is-applied, is-not-applied |  | owner-tag | is, is-not, starts-with, ends-with, contains, does-not-contain, is-applied, is-not-applied |  | vulnerability-validated-status | are |  | vasset-cluster | is, is-not, contains, does-not-contain, starts-with |  | vasset-datacenter | is, is-not |  | vasset-host name | is, is-not, contains, does-not-contain, starts-with |  | vasset-power state | in, not-in |  | vasset-resource pool path | contains, does-not-contain |  | container-image | is, is-not, starts-with, ends-with, contains, does-not-contain, is-like, not-like |  | container-status | is, is-not |  | containers | are |   The following table outlines the operators and the values associated with them:  | Operator | Values |  | -------- | ------ |  | are | A single string property named \"value\" |  | is-between | A number property named \"lower\" and a number property named \"upper\" |  | contains | A single string property named \"value\" |  | does-not-contain | A single string property named \"value\" |  | is-earlier-than | A single number property named \"value\" |  | ends-with | A single string property named \"value\" |  | is-greater-than | A single number property named \"value\" |  | in | An array property named \"values\" |  | not-in | An array property named \"values\" |  | in-range | A number property named \"lower\" and a number property named \"upper\" |  | includes | An array property named \"values\" |  | is | A single string property named \"value\" |  | is-not | A single string property named \"value\" |  | is-applied | No value |  | is-not-applied | No value |  | is-empty | No value |  | is-not-empty | No value |  | is-less-than | A single number property named \"value\" |  | is-like | A single string property named \"value\" |  | does-not-contain | A single string property named \"value\" |  | not-in-range | A number property named \"lower\" and a number property named \"upper\" |  | not-like | A single string property named \"value\" |  | is-on-or-after | A single string property named \"value\", which is the date in ISO8601 format (yyyy-MM-dd) |  | is-on-or-before | A single string property named \"value\", which is the date in ISO8601 format (yyyy-MM-dd) |  | starts-with | A single string property named \"value\" |  | is-within-the-last | A single number property named \"value\" |   The following fields have enumerated values:  | Field | Acceptable Values |  | ----- | ----------------- |  | containers | 0=present, 1=not present |  | vulnerability-validated-status | 0=present, 1=not present |  | pci-compliance | 0=fail, 1=pass |  | alternate-address-type | 0=IPv4, 1=IPv6 |  | ip-address-type | 0=IPv4, 1=IPv6 |  | host-type | 0=Unknown, 1=Guest, 2=Hypervisor, 3=Physical, 4=Mobile |  | cvss-access-complexity | L=Low, M=Medium, H=High |  | cvss-integrity-impact | N=None, P=Partial, C=Complete |  | cvss-confidentiality-impact | N=None, P=Partial, C=Complete |  | cvss-availability-impact | N=None, P=Partial, C=Complete |  | cvss-access-vector | L=Local, A=Adjacent, N=Network |  | cvss-authentication-required | N=None, S=Single, M=Multiple |  | cvss-access-complexity | L=Low, M=Medium, H=High |  | cvss-v3-confidentiality-impact | N=None, L=Low, H=High |  | cvss-v3-integrity-impact | N=None, L=Low, H=High |  | cvss-v3-availability-impact | N=None, L=Low, H=High |  | cvss-v3-attack-vector | N=Network, A=Adjacent, L=Local, P=Physical |  | cvss-v3-attack-complexity | L=Low, H=High |  | cvss-v3-user-interaction | N=None, R=Required |  | cvss-v3-privileges-required | N=None, L=Low, H=High |  | container-status | created, running, paused, restarting, exited, dead, unknown |    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tag_search_criteria(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param SearchCriteria criterial: The details of the search criteria.
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tag_search_criteria_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tag_search_criteria_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_tag_search_criteria_with_http_info(self, id, **kwargs):  # noqa: E501
        """Tag Search Criteria  # noqa: E501

        Updates the search criteria associated with the tag.   The following table outlines the search criteria fields and the available operators:  | Field | Operators |  | ---------- | ---------------- |  | ip-address | is, is-not, in-range, not-in-range, is-like, not-like |  | ip-address-type | in, not-in |  | alternate-address-type | in |  | host-name | is, is-not, starts-with, ends-with, contains, does-not-contain, is-empty, is-not-empty, is-like, not-like |  | host-type | in, not-in |  | operating-system | contains, does-not-contain, is-empty, is-not-empty |  | software | contains, does-not-contain|  | open-ports | is, is-not, in-range |  | service-name | contains, does-not-contain |  | risk-score | is, is-not, in-range, is-greater-than,is-less-than |  | last-scan-date | is-on-or-before, is-on-or-after, is-between, is-earlier-than, is-within-the-last |  | vulnerability-assessed | is-on-or-before, is-on-or-after, is-between, is-earlier-than, is-within-the-last |  | vulnerability-category | is, is-not, starts-with, ends-with, contains, does-not-contain|  | vulnerability-cvss-score | is, is-not, in-range, is-greater-than, is-less-than |  | vulnerability-cvss-v3-score | is, is-not, in-range, is-greater-than, is-less-than |  | vulnerability-exposures | includes, does not-include |  | vulnerability-title | contains, does-not-contain, is, is-not, starts-with, ends-with |  | cve | is, is-not, contains, does-not-contain |  | cvss-access-complexity | is, is-not | | cvss-authentication-required | is, is-not | | cvss-access-vector | is, is-not | | cvss-availability-impact | is, is-not | | cvss-confidentiality-impact | is, is-not | | cvss-integrity-impact | is, is-not | | cvss-v3-confidentiality-impact | is, is-not | | cvss-v3-integrity-impact | is, is-not | | cvss-v3-availability-impact | is, is-not | | cvss-v3-attack-vector | is, is-not | | cvss-v3-attack-complexity | is, is-not | | cvss-v3-user-interaction | is, is-not | | cvss-v3-privileges-required | is, is-not | | mobile-device-last-sync | is-within-the-last, is-earlier-than |  | pci-compliance | is |  | site-id | in, not-in |  | criticality-tag | is, is-not, is-greater-than, is-less-than, is-applied, is-not-applied |  | custom-tag | is, is-not, starts-with, ends-with, contains, does-not-contain, is-applied, is-not-applied |  | location-tag | is, is-not, starts-with, ends-with, contains, does-not-contain, is-applied, is-not-applied |  | owner-tag | is, is-not, starts-with, ends-with, contains, does-not-contain, is-applied, is-not-applied |  | vulnerability-validated-status | are |  | vasset-cluster | is, is-not, contains, does-not-contain, starts-with |  | vasset-datacenter | is, is-not |  | vasset-host name | is, is-not, contains, does-not-contain, starts-with |  | vasset-power state | in, not-in |  | vasset-resource pool path | contains, does-not-contain |  | container-image | is, is-not, starts-with, ends-with, contains, does-not-contain, is-like, not-like |  | container-status | is, is-not |  | containers | are |   The following table outlines the operators and the values associated with them:  | Operator | Values |  | -------- | ------ |  | are | A single string property named \"value\" |  | is-between | A number property named \"lower\" and a number property named \"upper\" |  | contains | A single string property named \"value\" |  | does-not-contain | A single string property named \"value\" |  | is-earlier-than | A single number property named \"value\" |  | ends-with | A single string property named \"value\" |  | is-greater-than | A single number property named \"value\" |  | in | An array property named \"values\" |  | not-in | An array property named \"values\" |  | in-range | A number property named \"lower\" and a number property named \"upper\" |  | includes | An array property named \"values\" |  | is | A single string property named \"value\" |  | is-not | A single string property named \"value\" |  | is-applied | No value |  | is-not-applied | No value |  | is-empty | No value |  | is-not-empty | No value |  | is-less-than | A single number property named \"value\" |  | is-like | A single string property named \"value\" |  | does-not-contain | A single string property named \"value\" |  | not-in-range | A number property named \"lower\" and a number property named \"upper\" |  | not-like | A single string property named \"value\" |  | is-on-or-after | A single string property named \"value\", which is the date in ISO8601 format (yyyy-MM-dd) |  | is-on-or-before | A single string property named \"value\", which is the date in ISO8601 format (yyyy-MM-dd) |  | starts-with | A single string property named \"value\" |  | is-within-the-last | A single number property named \"value\" |   The following fields have enumerated values:  | Field | Acceptable Values |  | ----- | ----------------- |  | containers | 0=present, 1=not present |  | vulnerability-validated-status | 0=present, 1=not present |  | pci-compliance | 0=fail, 1=pass |  | alternate-address-type | 0=IPv4, 1=IPv6 |  | ip-address-type | 0=IPv4, 1=IPv6 |  | host-type | 0=Unknown, 1=Guest, 2=Hypervisor, 3=Physical, 4=Mobile |  | cvss-access-complexity | L=Low, M=Medium, H=High |  | cvss-integrity-impact | N=None, P=Partial, C=Complete |  | cvss-confidentiality-impact | N=None, P=Partial, C=Complete |  | cvss-availability-impact | N=None, P=Partial, C=Complete |  | cvss-access-vector | L=Local, A=Adjacent, N=Network |  | cvss-authentication-required | N=None, S=Single, M=Multiple |  | cvss-access-complexity | L=Low, M=Medium, H=High |  | cvss-v3-confidentiality-impact | N=None, L=Low, H=High |  | cvss-v3-integrity-impact | N=None, L=Low, H=High |  | cvss-v3-availability-impact | N=None, L=Low, H=High |  | cvss-v3-attack-vector | N=Network, A=Adjacent, L=Local, P=Physical |  | cvss-v3-attack-complexity | L=Low, H=High |  | cvss-v3-user-interaction | N=None, R=Required |  | cvss-v3-privileges-required | N=None, L=Low, H=High |  | container-status | created, running, paused, restarting, exited, dead, unknown |    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tag_search_criteria_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the tag. (required)
        :param SearchCriteria criterial: The details of the search criteria.
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'criterial']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tag_search_criteria" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_tag_search_criteria`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'criterial' in params:
            body_params = params['criterial']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/tags/{id}/search_criteria', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
