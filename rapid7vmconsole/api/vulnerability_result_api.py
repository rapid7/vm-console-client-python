# coding: utf-8

"""
    Python InsightVM API Client

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rapid7vmconsole.api_client import ApiClient


class VulnerabilityResultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_vulnerability_validation(self, id, vulnerability_id, **kwargs):  # noqa: E501
        """Asset Vulnerability Validations  # noqa: E501

        Creates a vulnerability validation for a vulnerability on an asset. The validation signifies that the vulnerability has been confirmed exploitable by an external tool, such as <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.metasploit.com\">Metasploit</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vulnerability_validation(id, vulnerability_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :param VulnerabilityValidationResource validation: A vulnerability validation for a vulnerability on an asset. The  validation signifies that the vulnerability has been confirmed exploitable by an external tool, such as <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.metasploit.com\">Metasploit</a>.
        :return: CreatedReferenceVulnerabilityValidationIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_vulnerability_validation_with_http_info(id, vulnerability_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vulnerability_validation_with_http_info(id, vulnerability_id, **kwargs)  # noqa: E501
            return data

    def create_vulnerability_validation_with_http_info(self, id, vulnerability_id, **kwargs):  # noqa: E501
        """Asset Vulnerability Validations  # noqa: E501

        Creates a vulnerability validation for a vulnerability on an asset. The validation signifies that the vulnerability has been confirmed exploitable by an external tool, such as <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.metasploit.com\">Metasploit</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vulnerability_validation_with_http_info(id, vulnerability_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :param VulnerabilityValidationResource validation: A vulnerability validation for a vulnerability on an asset. The  validation signifies that the vulnerability has been confirmed exploitable by an external tool, such as <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.metasploit.com\">Metasploit</a>.
        :return: CreatedReferenceVulnerabilityValidationIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vulnerability_id', 'validation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vulnerability_validation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_vulnerability_validation`")  # noqa: E501
        # verify the required parameter 'vulnerability_id' is set
        if ('vulnerability_id' not in params or
                params['vulnerability_id'] is None):
            raise ValueError("Missing the required parameter `vulnerability_id` when calling `create_vulnerability_validation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'vulnerability_id' in params:
            path_params['vulnerabilityId'] = params['vulnerability_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'validation' in params:
            body_params = params['validation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedReferenceVulnerabilityValidationIDLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vulnerability_validation(self, id, vulnerability_id, validation_id, **kwargs):  # noqa: E501
        """Asset Vulnerability Validation  # noqa: E501

        Removes a vulnerability validation for a vulnerability from an asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vulnerability_validation(id, vulnerability_id, validation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :param int validation_id: The identifier of the vulnerability validation. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, **kwargs)  # noqa: E501
            return data

    def delete_vulnerability_validation_with_http_info(self, id, vulnerability_id, validation_id, **kwargs):  # noqa: E501
        """Asset Vulnerability Validation  # noqa: E501

        Removes a vulnerability validation for a vulnerability from an asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :param int validation_id: The identifier of the vulnerability validation. (required)
        :return: Links
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vulnerability_id', 'validation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vulnerability_validation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_vulnerability_validation`")  # noqa: E501
        # verify the required parameter 'vulnerability_id' is set
        if ('vulnerability_id' not in params or
                params['vulnerability_id'] is None):
            raise ValueError("Missing the required parameter `vulnerability_id` when calling `delete_vulnerability_validation`")  # noqa: E501
        # verify the required parameter 'validation_id' is set
        if ('validation_id' not in params or
                params['validation_id'] is None):
            raise ValueError("Missing the required parameter `validation_id` when calling `delete_vulnerability_validation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'vulnerability_id' in params:
            path_params['vulnerabilityId'] = params['vulnerability_id']  # noqa: E501
        if 'validation_id' in params:
            path_params['validationId'] = params['validation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations/{validationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Links',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_service_vulnerabilities(self, id, protocol, port, **kwargs):  # noqa: E501
        """Asset Service Vulnerabilities  # noqa: E501

        Retrieves the vulnerabilities present on a service running on an asset. A finding may be `invulnerable` if all instances on the service have exceptions applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_vulnerabilities(id, protocol, port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str protocol: The protocol of the service. (required)
        :param int port: The port of the service. (required)
        :param int page: The index of the page (zero-based) to retrieve.
        :param int size: The number of records per page to retrieve.
        :param list[str] sort: The criteria to sort the records by, in the format: `property[,ASC|DESC]`. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
        :return: PageOfVulnerabilityFinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_service_vulnerabilities_with_http_info(id, protocol, port, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_service_vulnerabilities_with_http_info(id, protocol, port, **kwargs)  # noqa: E501
            return data

    def get_asset_service_vulnerabilities_with_http_info(self, id, protocol, port, **kwargs):  # noqa: E501
        """Asset Service Vulnerabilities  # noqa: E501

        Retrieves the vulnerabilities present on a service running on an asset. A finding may be `invulnerable` if all instances on the service have exceptions applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_vulnerabilities_with_http_info(id, protocol, port, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str protocol: The protocol of the service. (required)
        :param int port: The port of the service. (required)
        :param int page: The index of the page (zero-based) to retrieve.
        :param int size: The number of records per page to retrieve.
        :param list[str] sort: The criteria to sort the records by, in the format: `property[,ASC|DESC]`. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
        :return: PageOfVulnerabilityFinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'protocol', 'port', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_service_vulnerabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_asset_service_vulnerabilities`")  # noqa: E501
        # verify the required parameter 'protocol' is set
        if ('protocol' not in params or
                params['protocol'] is None):
            raise ValueError("Missing the required parameter `protocol` when calling `get_asset_service_vulnerabilities`")  # noqa: E501
        # verify the required parameter 'port' is set
        if ('port' not in params or
                params['port'] is None):
            raise ValueError("Missing the required parameter `port` when calling `get_asset_service_vulnerabilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'protocol' in params:
            path_params['protocol'] = params['protocol']  # noqa: E501
        if 'port' in params:
            path_params['port'] = params['port']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/assets/{id}/services/{protocol}/{port}/vulnerabilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfVulnerabilityFinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_vulnerabilities(self, id, **kwargs):  # noqa: E501
        """Asset Vulnerabilities  # noqa: E501

        Retrieves all vulnerability findings on an asset. A finding may be `invulnerable` if all instances have exceptions applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_vulnerabilities(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param int page: The index of the page (zero-based) to retrieve.
        :param int size: The number of records per page to retrieve.
        :param list[str] sort: The criteria to sort the records by, in the format: `property[,ASC|DESC]`. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
        :return: PageOfVulnerabilityFinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_vulnerabilities_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_vulnerabilities_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_asset_vulnerabilities_with_http_info(self, id, **kwargs):  # noqa: E501
        """Asset Vulnerabilities  # noqa: E501

        Retrieves all vulnerability findings on an asset. A finding may be `invulnerable` if all instances have exceptions applied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_vulnerabilities_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param int page: The index of the page (zero-based) to retrieve.
        :param int size: The number of records per page to retrieve.
        :param list[str] sort: The criteria to sort the records by, in the format: `property[,ASC|DESC]`. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
        :return: PageOfVulnerabilityFinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_vulnerabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_asset_vulnerabilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/assets/{id}/vulnerabilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfVulnerabilityFinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_vulnerability(self, id, vulnerability_id, **kwargs):  # noqa: E501
        """Asset Vulnerability  # noqa: E501

        Retrieves the details for a vulnerability finding on an asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_vulnerability(id, vulnerability_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :return: VulnerabilityFinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_vulnerability_with_http_info(id, vulnerability_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_vulnerability_with_http_info(id, vulnerability_id, **kwargs)  # noqa: E501
            return data

    def get_asset_vulnerability_with_http_info(self, id, vulnerability_id, **kwargs):  # noqa: E501
        """Asset Vulnerability  # noqa: E501

        Retrieves the details for a vulnerability finding on an asset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_vulnerability_with_http_info(id, vulnerability_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :return: VulnerabilityFinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vulnerability_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_asset_vulnerability`")  # noqa: E501
        # verify the required parameter 'vulnerability_id' is set
        if ('vulnerability_id' not in params or
                params['vulnerability_id'] is None):
            raise ValueError("Missing the required parameter `vulnerability_id` when calling `get_asset_vulnerability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'vulnerability_id' in params:
            path_params['vulnerabilityId'] = params['vulnerability_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VulnerabilityFinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerability_validation(self, id, vulnerability_id, validation_id, **kwargs):  # noqa: E501
        """Asset Vulnerability Validation  # noqa: E501

        Returns a vulnerability validation for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_validation(id, vulnerability_id, validation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :param int validation_id: The identifier of the vulnerability validation. (required)
        :return: VulnerabilityValidationResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, **kwargs)  # noqa: E501
            return data

    def get_vulnerability_validation_with_http_info(self, id, vulnerability_id, validation_id, **kwargs):  # noqa: E501
        """Asset Vulnerability Validation  # noqa: E501

        Returns a vulnerability validation for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_validation_with_http_info(id, vulnerability_id, validation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :param int validation_id: The identifier of the vulnerability validation. (required)
        :return: VulnerabilityValidationResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vulnerability_id', 'validation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerability_validation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_vulnerability_validation`")  # noqa: E501
        # verify the required parameter 'vulnerability_id' is set
        if ('vulnerability_id' not in params or
                params['vulnerability_id'] is None):
            raise ValueError("Missing the required parameter `vulnerability_id` when calling `get_vulnerability_validation`")  # noqa: E501
        # verify the required parameter 'validation_id' is set
        if ('validation_id' not in params or
                params['validation_id'] is None):
            raise ValueError("Missing the required parameter `validation_id` when calling `get_vulnerability_validation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'vulnerability_id' in params:
            path_params['vulnerabilityId'] = params['vulnerability_id']  # noqa: E501
        if 'validation_id' in params:
            path_params['validationId'] = params['validation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations/{validationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VulnerabilityValidationResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerability_validations(self, id, vulnerability_id, **kwargs):  # noqa: E501
        """Asset Vulnerability Validations  # noqa: E501

        Returns all vulnerability validations for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_validations(id, vulnerability_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :return: ResourcesVulnerabilityValidationResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerability_validations_with_http_info(id, vulnerability_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerability_validations_with_http_info(id, vulnerability_id, **kwargs)  # noqa: E501
            return data

    def get_vulnerability_validations_with_http_info(self, id, vulnerability_id, **kwargs):  # noqa: E501
        """Asset Vulnerability Validations  # noqa: E501

        Returns all vulnerability validations for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_validations_with_http_info(id, vulnerability_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the asset. (required)
        :param str vulnerability_id: The identifier of the vulnerability. (required)
        :return: ResourcesVulnerabilityValidationResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vulnerability_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerability_validations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_vulnerability_validations`")  # noqa: E501
        # verify the required parameter 'vulnerability_id' is set
        if ('vulnerability_id' not in params or
                params['vulnerability_id'] is None):
            raise ValueError("Missing the required parameter `vulnerability_id` when calling `get_vulnerability_validations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'vulnerability_id' in params:
            path_params['vulnerabilityId'] = params['vulnerability_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourcesVulnerabilityValidationResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
