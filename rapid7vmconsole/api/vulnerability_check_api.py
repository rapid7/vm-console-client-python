# coding: utf-8

"""
    Python InsightVM API Client

    OpenAPI spec version: 3
    Contact: support@rapid7.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rapid7vmconsole.api_client import ApiClient


class VulnerabilityCheckApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_vulnerability_check_types(self, **kwargs):  # noqa: E501
        """Check Types  # noqa: E501

        Returns the vulnerability check types. The type groups related vulnerability checks by their purpose, property, or related characteristic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_check_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ReferencesWithVulnerabilityCheckTypeIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerability_check_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerability_check_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_vulnerability_check_types_with_http_info(self, **kwargs):  # noqa: E501
        """Check Types  # noqa: E501

        Returns the vulnerability check types. The type groups related vulnerability checks by their purpose, property, or related characteristic.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_check_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ReferencesWithVulnerabilityCheckTypeIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerability_check_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/vulnerability_checks_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferencesWithVulnerabilityCheckTypeIDLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerability_checks(self, **kwargs):  # noqa: E501
        """Checks  # noqa: E501

        Returns vulnerability checks. Optional search and filtering parameters may be supplied to refine the results. Searching allows full text search of the vulnerability details a check is related to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_checks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Vulnerability search term to find vulnerability checks for. e.g. `\"ssh\"`.
        :param bool safe: Whether to return vulnerability checks that are considered \"safe\" to run. Defaults to return safe and unsafe checks.
        :param bool potential: Whether to only return checks that result in potentially vulnerable results. Defaults to return all checks.
        :param bool requires_credentials: Whether to only return checks that require credentials in order to successfully execute. Defaults to return all checks.
        :param bool unique: Whether to only return checks that guarantee to be executed once-and-only once on a host resulting in a unique result. False returns checks that can result in multiple occurrences of the same vulnerability on a host.
        :param str type: The type of vulnerability checks to return. See <a href=\"#operation/vulnerabilityCheckTypesUsingGET\">Check Types</a> for all available types.
        :param int page: The index of the page (zero-based) to retrieve.
        :param int size: The number of records per page to retrieve.
        :param list[str] sort: The criteria to sort the records by, in the format: `property[,ASC|DESC]`. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
        :return: PageOfVulnerabilityCheck
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerability_checks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerability_checks_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_vulnerability_checks_with_http_info(self, **kwargs):  # noqa: E501
        """Checks  # noqa: E501

        Returns vulnerability checks. Optional search and filtering parameters may be supplied to refine the results. Searching allows full text search of the vulnerability details a check is related to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_checks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search: Vulnerability search term to find vulnerability checks for. e.g. `\"ssh\"`.
        :param bool safe: Whether to return vulnerability checks that are considered \"safe\" to run. Defaults to return safe and unsafe checks.
        :param bool potential: Whether to only return checks that result in potentially vulnerable results. Defaults to return all checks.
        :param bool requires_credentials: Whether to only return checks that require credentials in order to successfully execute. Defaults to return all checks.
        :param bool unique: Whether to only return checks that guarantee to be executed once-and-only once on a host resulting in a unique result. False returns checks that can result in multiple occurrences of the same vulnerability on a host.
        :param str type: The type of vulnerability checks to return. See <a href=\"#operation/vulnerabilityCheckTypesUsingGET\">Check Types</a> for all available types.
        :param int page: The index of the page (zero-based) to retrieve.
        :param int size: The number of records per page to retrieve.
        :param list[str] sort: The criteria to sort the records by, in the format: `property[,ASC|DESC]`. The default sort order is ascending. Multiple sort criteria can be specified using multiple sort query parameters.
        :return: PageOfVulnerabilityCheck
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'safe', 'potential', 'requires_credentials', 'unique', 'type', 'page', 'size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerability_checks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'safe' in params:
            query_params.append(('safe', params['safe']))  # noqa: E501
        if 'potential' in params:
            query_params.append(('potential', params['potential']))  # noqa: E501
        if 'requires_credentials' in params:
            query_params.append(('requiresCredentials', params['requires_credentials']))  # noqa: E501
        if 'unique' in params:
            query_params.append(('unique', params['unique']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/vulnerability_checks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageOfVulnerabilityCheck',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vulnerability_checks_for_vulnerability(self, id, **kwargs):  # noqa: E501
        """Vulnerability Checks  # noqa: E501

        Returns the vulnerability checks that assess for a specific vulnerability during a scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_checks_for_vulnerability(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The identifier of the vulnerability. (required)
        :return: ReferencesWithVulnerabilityCheckIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vulnerability_checks_for_vulnerability_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vulnerability_checks_for_vulnerability_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_vulnerability_checks_for_vulnerability_with_http_info(self, id, **kwargs):  # noqa: E501
        """Vulnerability Checks  # noqa: E501

        Returns the vulnerability checks that assess for a specific vulnerability during a scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vulnerability_checks_for_vulnerability_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The identifier of the vulnerability. (required)
        :return: ReferencesWithVulnerabilityCheckIDLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vulnerability_checks_for_vulnerability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_vulnerability_checks_for_vulnerability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/vulnerabilities/{id}/checks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReferencesWithVulnerabilityCheckIDLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vulnerability_check(self, id, **kwargs):  # noqa: E501
        """Check  # noqa: E501

        Returns the vulnerability check.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vulnerability_check(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The identifier of the vulnerability check. (required)
        :return: VulnerabilityCheck
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vulnerability_check_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vulnerability_check_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vulnerability_check_with_http_info(self, id, **kwargs):  # noqa: E501
        """Check  # noqa: E501

        Returns the vulnerability check.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vulnerability_check_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The identifier of the vulnerability check. (required)
        :return: VulnerabilityCheck
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vulnerability_check" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vulnerability_check`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/3/vulnerability_checks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VulnerabilityCheck',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
